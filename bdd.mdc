---
description: 
globs: 
alwaysApply: false
---
# Task List Management with BDD/TDD
Guidelines for converting and modifying existing task lists to follow Behavior-Driven Development and Test-Driven Development practices.

## Converting Existing Task Lists to BDD/TDD Format

1. When modifying an existing task list created with the task-list format:
   - Preserve the existing structure (Completed, In Progress, Future Tasks sections)
   - Add new "User Stories/Scenarios" section below the feature description
   - Reorganize tasks to follow the Red-Green-Refactor cycle
   - Keep the "Relevant Files" section updated with test files

2. Add a "User Stories/Scenarios" section after the feature description:
  ```markdown
  ## User Stories/Scenarios
  Document user stories and scenarios in a BDD format:
  ```
  Feature: [Feature Name]
  Scenario: [Scenario Name]
    Given [precondition]
    When [action]
    Then [expected outcome]
  ```
  ```

3. Reorganize existing tasks into component-focused cycles following Red-Green-Refactor:
   - Keep original tasks as parent tasks
   - Add Red-Green-Refactor subtasks under each parent task
   - Add emoji indicators (ðŸ”´ ðŸŸ¢ ðŸ”µ) to clarify the cycle phase

4. Example of converting standard tasks to BDD/TDD format:

   **Original format:**
   ```markdown
   ## In Progress Tasks
   - [ ] Implement user authentication
   - [ ] Create login form
   - [ ] Add form validation
   ```

   **Converted to BDD/TDD format:**
   ```markdown
   ## In Progress Tasks
   
   - [ ] Implement user authentication
     - [ ] ðŸ”´ Write failing test for user authentication flow
     - [ ] ðŸŸ¢ Implement authentication to make test pass
     - [ ] ðŸ”µ Refactor authentication for better security
   
   - [ ] Create login form
     - [ ] ðŸ”´ Write failing test for login form rendering
     - [ ] ðŸŸ¢ Implement login form component to make test pass
     - [ ] ðŸ”µ Refactor form for better organization
   
   - [ ] Add form validation
     - [ ] ðŸ”´ Write failing test for form validation rules
     - [ ] ðŸŸ¢ Implement validation to make test pass
     - [ ] ðŸ”µ Refactor validation for better user experience
   ```

## Converting Tasks with Existing Subtasks

1. When a task list already has subtasks, convert each subtask into its own Red-Green-Refactor cycle:
   - Keep original tasks and subtasks structure
   - Add Red-Green-Refactor sub-subtasks under each subtask
   - Create appropriate BDD scenarios for logical groups of subtasks

2. Example of converting tasks with existing subtasks:

   **Original format with subtasks:**
   ```markdown
   ## In Progress Tasks
   - [ ] Implement dashboard
     - [ ] Create dashboard layout
     - [ ] Add data visualization components
     - [ ] Implement filtering functionality
   - [ ] Develop user profile page
     - [ ] Display user information
     - [ ] Add edit profile functionality
     - [ ] Implement avatar upload
   ```

   **Converted to BDD/TDD format:**
   ```markdown
   ## User Stories/Scenarios
   
   Feature: Dashboard
   Scenario: View dashboard with filtered data
     Given the user is logged in
     When they navigate to the dashboard
     Then they should see data visualizations
     And they should be able to filter the data
   
   Feature: User Profile
   Scenario: Edit user profile information
     Given the user is on their profile page
     When they edit their profile information
     Then their changes should be saved
   
   Scenario: Upload profile avatar
     Given the user is on their profile page
     When they upload a new avatar image
     Then their profile should display the new avatar
   
   ## In Progress Tasks
   
   - [ ] Implement dashboard
     - [ ] Create dashboard layout
       - [ ] ðŸ”´ Write failing test for dashboard layout rendering
       - [ ] ðŸŸ¢ Implement dashboard layout to make test pass
       - [ ] ðŸ”µ Refactor layout for better organization
     - [ ] Add data visualization components
       - [ ] ðŸ”´ Write failing test for data visualization components
       - [ ] ðŸŸ¢ Implement visualization components to make test pass
       - [ ] ðŸ”µ Refactor components for performance
     - [ ] Implement filtering functionality
       - [ ] ðŸ”´ Write failing test for dashboard filtering
       - [ ] ðŸŸ¢ Implement filtering to make test pass
       - [ ] ðŸ”µ Refactor filtering for better UX
   
   - [ ] Develop user profile page
     - [ ] Display user information
       - [ ] ðŸ”´ Write failing test for user profile display
       - [ ] ðŸŸ¢ Implement profile display to make test pass
       - [ ] ðŸ”µ Refactor display for better organization
     - [ ] Add edit profile functionality
       - [ ] ðŸ”´ Write failing test for edit profile functionality
       - [ ] ðŸŸ¢ Implement edit functionality to make test pass
       - [ ] ðŸ”µ Refactor edit functionality for better validation
     - [ ] Implement avatar upload
       - [ ] ðŸ”´ Write failing test for avatar upload
       - [ ] ðŸŸ¢ Implement avatar upload to make test pass
       - [ ] ðŸ”µ Refactor upload for better error handling
   ```

3. Example with deeply nested subtasks:

   **Original format with nested subtasks:**
   ```markdown
   ## In Progress Tasks
   - [ ] Build authentication system
     - [ ] Implement login functionality
       - [ ] Create login form
       - [ ] Add client-side validation
       - [ ] Integrate with API
     - [ ] Implement registration
       - [ ] Create registration form
       - [ ] Implement email verification
   ```

   **Converted to BDD/TDD format:**
   ```markdown
   ## User Stories/Scenarios
   
   Feature: Authentication
   Scenario: User login
     Given the user has an account
     When they enter valid credentials
     Then they should be authenticated and redirected
   
   Scenario: Login validation
     Given the user is on the login page
     When they enter invalid credentials
     Then they should see appropriate error messages
   
   Scenario: User registration
     Given the user does not have an account
     When they complete registration with valid information
     Then they should receive a verification email
   
   ## In Progress Tasks
   
   - [ ] Build authentication system
     - [ ] Implement login functionality
       - [ ] Create login form
         - [ ] ðŸ”´ Write failing test for login form rendering
         - [ ] ðŸŸ¢ Implement login form to make test pass
         - [ ] ðŸ”µ Refactor form for better organization
       - [ ] Add client-side validation
         - [ ] ðŸ”´ Write failing test for login validation
         - [ ] ðŸŸ¢ Implement validation to make test pass
         - [ ] ðŸ”µ Refactor validation for better user feedback
       - [ ] Integrate with API
         - [ ] ðŸ”´ Write failing test for API integration
         - [ ] ðŸŸ¢ Implement API calls to make test pass
         - [ ] ðŸ”µ Refactor for better error handling
     - [ ] Implement registration
       - [ ] Create registration form
         - [ ] ðŸ”´ Write failing test for registration form rendering
         - [ ] ðŸŸ¢ Implement registration form to make test pass
         - [ ] ðŸ”µ Refactor form for better organization
       - [ ] Implement email verification
         - [ ] ðŸ”´ Write failing test for email verification flow
         - [ ] ðŸŸ¢ Implement verification to make test pass
         - [ ] ðŸ”µ Refactor for better security
   ```

## Adding BDD Scenarios to Existing Task Lists

1. For each feature component, add specific scenarios:
   - Use the "Given-When-Then" format
   - Focus on observable behavior, not implementation details
   - Link scenarios to specific tasks when possible

2. Example of adding scenarios:
   ```markdown
   ## User Stories/Scenarios
   
   Feature: User Authentication
   Scenario: Successful login
     Given the user has valid credentials
     When they submit the login form
     Then they should be redirected to the dashboard
   
   Scenario: Failed login
     Given the user has invalid credentials
     When they submit the login form
     Then they should see an error message
   ```

3. Ensure scenarios are added before implementing related tasks

## Updating Task Progress in BDD/TDD Format

1. Follow the complete Red-Green-Refactor cycle for each component:
   - Complete all three steps for one component before moving to the next
   - Mark tasks as complete by changing `[ ]` to `[x]`
   - Move tasks between sections as appropriate

2. Example of updating task progress:

   **Before implementation starts:**
   ```markdown
   - [ ] User Authentication
     - [ ] ðŸ”´ Write failing test for user authentication
     - [ ] ðŸŸ¢ Implement authentication to make test pass
     - [ ] ðŸ”µ Refactor authentication for better security
   ```

   **After completing the Red phase:**
   ```markdown
   - [ ] User Authentication
     - [x] ðŸ”´ Write failing test for user authentication
     - [ ] ðŸŸ¢ Implement authentication to make test pass
     - [ ] ðŸ”µ Refactor authentication for better security
   ```

   **After completing the entire cycle:**
   ```markdown
   - [x] User Authentication
     - [x] ðŸ”´ Write failing test for user authentication
     - [x] ðŸŸ¢ Implement authentication to make test pass
     - [x] ðŸ”µ Refactor authentication for better security
   ```

3. Update the "Relevant Files" section with test files:
   ```markdown
   ## Relevant Files
   - `src/components/Auth/LoginForm.jsx`: Login form component. [Status: âœ… Done]
   - `src/services/authApi.js`: Authentication API logic. [Status: âœ… Done]
   - `tests/components/Auth/LoginForm.test.jsx`: Tests for login form. [Status: âœ… Done]
   - `tests/services/authApi.test.js`: Tests for auth API. [Status: âœ… Done]
   ```

## Maintaining BDD/TDD Task Lists

When working with converted task lists, follow these guidelines:

1. Always add scenarios before implementing code
2. Complete the entire Red-Green-Refactor cycle for each component
3. Keep the "Relevant Files" section updated with accurate test file information
4. Document any new behavior or edge cases as additional scenarios
5. When the entire task list is complete, move it to a `completed` directory in the tasks folder

## Example: Full Conversion of a Task List

**Original Task List:**
```markdown
# Authentication Feature Implementation

Brief description of the authentication feature.

## Completed Tasks
- [x] Project setup 

## In Progress Tasks
- [ ] Implement user authentication flow
- [ ] Create login form UI
- [ ] Add form validation

## Future Tasks
- [ ] Implement password reset
- [ ] Add "Remember Me" functionality

## Relevant Files
- `src/components/LoginForm.jsx`: Login form component. [Status: ðŸš§ In Progress]
```

**Converted to BDD/TDD Format:**
```markdown
# Authentication Feature Implementation 

Brief description of the authentication feature.

## User Stories/Scenarios
Feature: User Authentication
Scenario: Successful login
  Given the user has valid credentials
  When they submit the login form
  Then they should be redirected to the dashboard

Scenario: Failed login
  Given the user has invalid credentials
  When they submit the login form
  Then they should see an error message

## Completed Tasks
- [x] Project setup

## In Progress Tasks
- [ ] Implement user authentication flow
  - [ ] ðŸ”´ Write failing test for authentication service
  - [ ] ðŸŸ¢ Implement authentication service to make test pass
  - [ ] ðŸ”µ Refactor authentication service for better organization

- [ ] Create login form UI
  - [ ] ðŸ”´ Write failing test for login form rendering
  - [ ] ðŸŸ¢ Implement login form component to make test pass
  - [ ] ðŸ”µ Refactor form for better UX

- [ ] Add form validation
  - [ ] ðŸ”´ Write failing test for form validation rules
  - [ ] ðŸŸ¢ Implement validation to make test pass
  - [ ] ðŸ”µ Refactor validation for better error handling

## Future Tasks
- [ ] Implement password reset
  - [ ] ðŸ”´ Write failing test for password reset flow
  - [ ] ðŸŸ¢ Implement password reset to make test pass
  - [ ] ðŸ”µ Refactor password reset for security

- [ ] Add "Remember Me" functionality
  - [ ] ðŸ”´ Write failing test for "Remember Me" feature
  - [ ] ðŸŸ¢ Implement "Remember Me" to make test pass
  - [ ] ðŸ”µ Refactor for better persistence

## Relevant Files
- `src/components/LoginForm.jsx`: Login form component. [Status: ðŸš§ In Progress]
- `tests/components/LoginForm.test.jsx`: Tests for login form. [Status: ðŸš§ In Progress]
```

This approach ensures:
- Each component goes through a complete TDD cycle
- Changes are small and focused
- Every feature is fully tested
- The code is continually refactored
- Progress is clearly visible in the task list
